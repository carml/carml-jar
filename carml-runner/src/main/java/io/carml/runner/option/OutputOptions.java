package io.carml.runner.option;

import static io.carml.runner.option.OptionOrder.BASE_IRI_ORDER;
import static io.carml.runner.option.OptionOrder.LIMIT_ORDER;
import static io.carml.runner.option.OptionOrder.OUTPUT_ORDER;
import static io.carml.runner.option.OptionOrder.OUT_FORMAT_ORDER;
import static io.carml.runner.option.OptionOrder.PRETTY_ORDER;

import java.nio.file.Path;
import java.util.Optional;
import lombok.Getter;
import org.eclipse.rdf4j.model.IRI;
import org.springframework.stereotype.Component;
import picocli.CommandLine.Option;

@Getter
@Component
public class OutputOptions {

  @Option(names = {"-F", "-of", "--outformat"}, completionCandidates = OutputRdfFormats.class, defaultValue = "nq",
      order = OUT_FORMAT_ORDER,
      description = {"Output RDF format. Default: ${DEFAULT-VALUE}.", "Supported values are ${COMPLETION-CANDIDATES}"})
  private String outputRdfFormat;

  @Option(names = {"-o", "--output"}, order = OUTPUT_ORDER, description = { //
      "Output file path.", //
      "If path is directory, will default to fileName `output`.", //
      "If left empty will output to console."})
  private Path outputPath;

  @Option(names = {"-P", "--pretty"}, order = PRETTY_ORDER,
      description = "Serialize pretty printed output. (Caution: will cause in-memory output collection).")
  private boolean pretty;

  @Option(names = {"-b", "--base-iri"}, order = BASE_IRI_ORDER, converter = IriConverter.class,
      description = {"Base IRI to use to expand relative IRIs in the generated output.",
          "If not specified the default `http://example.com/base/` is used."})
  private Optional<IRI> baseIri;

  @Option(names = {"-l", "--limit"}, order = LIMIT_ORDER,
      description = "Limit the number of statements generated by the amount provided.")
  private Optional<Long> limit;
}
